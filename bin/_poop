#!/bin/bash

function do_ {
  true
}

function directory {
  _poop_name="$1"; shift
  _poop_resource="directory"
}

function do_directory {
  : ${_poop_action:=create}
  : ${_poop_path:=${_poop_name}}
  : ${_poop_recursive:=false}

  eval "do_${_poop_resource}_${_poop_action}"
}

function do_directory_create {
  # since install -d recursively creates directories, check for intermediate
  # directories manually when recursion is not desired
  if [[ "$_poop_recursive" = false ]]; then
    local dname="$(dirname "${_poop_path}")"
    if [[ ! -d "$dname" ]]; then
      logger_fatal "while creating ${_poop_path}, $dname is not a directory"
      exit 1
    fi
  fi

  install -v -d $(install_options)"${_poop_path}"
}

function do_directory_delete {
  if [[ "$_poop_recursive" = false ]]; then
    rm -vd  "${_poop_path}"
  else
    rm -vrf "${_poop_path}"
  fi
}

function ignore_failure {
  _poop_ignore_failure="$1"; shift
}

function provider {
  _poop_provider="$1"; shift
}

function retries {
  _poop_retries="$1"; shift
}

function retry_delay {
  _poop_retry_delay="$1"; shift
}

function supports {
  _poop_supports="$1"; shift
}

function action {
  _poop_action="$1"; shift
}

function mode {
  _poop_mode="$1"; shift
}

function owner {
  _poop_owner="$1"; shift
}

function group {
  _poop_group="$1"; shift
}

function path {
  _poop_path="$1"; shift
}

function recursive {
  _poop_recursive="$1"; shift
}

function end {
  eval "do_${_poop_resource}"

  _poop_ignore_failure=
  _poop_provider=
  _poop_retries=
  _poop_retry_delay=
  _poop_supports=
  _poop_name=
  _poop_action=
  _poop_mode=
  _poop_owner=
  _poop_group=
  _poop_path=
  _poop_recursive=
}

function install_options {
  if [[ -n "$_poop_mode" ]]; then
    echo -n "-m $_poop_mode "
  fi

  if [[ -n "$_poop_owner" ]]; then
    echo -n "-o $_poop_owner"
  fi

  if [[ -n "$_poop_group" ]]; then
    echo -n "-g $_poop_group"
  fi
}

function recipe {
  local nm_recipe="$1"; shift
  set --
  source "$shome/recipes/$nm_recipe"
}

_poop_resource=
end
